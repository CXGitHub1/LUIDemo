{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"order",
				"orderIndex"
			],
			[
				"cou",
				"column"
			],
			[
				"page",
				"pageIndex"
			],
			[
				"pag",
				"page"
			],
			[
				"pagen",
				"perPageCount"
			],
			[
				"mask",
				"maskTrans"
			],
			[
				"end",
				"endIndex"
			],
			[
				"Push",
				"_PushUnUsedItem"
			],
			[
				"Get",
				"_GetStartIndex"
			],
			[
				"Util",
				"UtilsTable"
			],
			[
				"pri",
				"priorClassDict"
			],
			[
				"pr",
				"priorClassDict"
			],
			[
				"lay",
				"layerName"
			],
			[
				"Vec",
				"Vector3One"
			],
			[
				"Page",
				"SetCurrentPage"
			],
			[
				"off",
				"offsetY"
			],
			[
				"ra",
				"rawImageGo"
			],
			[
				"lo",
				"loaderData"
			],
			[
				"local",
				"localPosition"
			],
			[
				"car",
				"cameraGo"
			],
			[
				"came",
				"cameraGo"
			],
			[
				"cae",
				"cameraGo"
			],
			[
				"ca",
				"cameraGo"
			],
			[
				"cl",
				"clipName"
			],
			[
				"sta",
				"stand"
			],
			[
				"ani",
				"animation"
			],
			[
				"Ins",
				"Instance"
			],
			[
				"rend",
				"renderer"
			],
			[
				"In",
				"Instance"
			],
			[
				"Ass",
				"AssetLoader"
			],
			[
				"_getCon",
				"_GetContentMinX"
			],
			[
				"ac",
				"anchoredPosition"
			],
			[
				"_GetCon",
				"_GetContentMinX"
			],
			[
				"_GetCo",
				"_GetContentMaxY"
			],
			[
				"GetC",
				"_GetContentMaxY"
			],
			[
				"padd",
				"paddingTop"
			],
			[
				"add",
				"addStartIndex"
			],
			[
				"_Adda",
				"_AddAtStartCreateLine"
			],
			[
				"Li",
				"LimitY"
			],
			[
				"_GetR",
				"_GetRowIndex"
			],
			[
				"re",
				"return"
			],
			[
				"LSIS",
				"LSIScrollViewTest"
			],
			[
				"IS",
				"_IsVerticalScroll"
			],
			[
				"co",
				"column"
			],
			[
				"Is",
				"_IsVerticalScroll"
			],
			[
				"row",
				"rowIndex"
			],
			[
				"_GetRo",
				"_GetStartRowIndex"
			],
			[
				"_get",
				"_GetRCStartIndex"
			],
			[
				"_GetData",
				"_GetDataLength"
			],
			[
				"_Pu",
				"_PushUnUsedItem"
			],
			[
				"_GetRow",
				"_GetRowStartIndex"
			],
			[
				"y",
				"yList"
			],
			[
				"item",
				"Item"
			],
			[
				"itemT",
				"itemTypeDict"
			],
			[
				"max",
				"maxY"
			],
			[
				"itemP",
				"itemPoolListDict"
			],
			[
				"itemTy",
				"itemType"
			],
			[
				"GetItem",
				"GetItemWay"
			],
			[
				"_getin",
				"_GetIndexByY"
			],
			[
				"_GetMask",
				"_GetMaskTop"
			],
			[
				"ma",
				"math_random"
			],
			[
				"daa",
				"dataList"
			],
			[
				"hei",
				"heightList"
			],
			[
				"im",
				"itemTypeDict"
			],
			[
				"tem",
				"templateList"
			],
			[
				"Add",
				"AddVert"
			],
			[
				"Col",
				"Color"
			],
			[
				"Inser",
				"InsertSphereLineVertices"
			],
			[
				"par",
				"parentIndex"
			],
			[
				"pare",
				"parentIndex"
			],
			[
				"paren",
				"parentIndex"
			],
			[
				"pen",
				"parentStartIndex"
			],
			[
				"fo",
				"front"
			],
			[
				"rad",
				"radius"
			],
			[
				"DrawS",
				"DrawSphere"
			],
			[
				"tra",
				"triangles"
			],
			[
				"Draw",
				"DrawTriangle"
			],
			[
				"defa",
				"defaultNodePoolList"
			],
			[
				"de",
				"depth"
			],
			[
				"defau",
				"defaultNodePoolList"
			],
			[
				"node",
				"nodeData"
			],
			[
				"lt",
				"ltDescr"
			],
			[
				"lT",
				"lTree1"
			],
			[
				"nodeda",
				"nodeDataDict"
			],
			[
				"_GetMas",
				"_GetMaskBottom"
			],
			[
				"chil",
				"childHeight"
			],
			[
				"GetMas",
				"_GetMaskTop"
			],
			[
				"nodeDa",
				"nodeData"
			],
			[
				"_Get",
				"_GetMaskTop"
			],
			[
				"chidl",
				"childNodeData"
			],
			[
				"or",
				"orderList"
			],
			[
				"_GetI",
				"_GetItemWidth"
			],
			[
				"GetNo",
				"_GetNodeX"
			],
			[
				"siez",
				"sizeDelta"
			],
			[
				"star",
				"startIndex"
			],
			[
				"st",
				"string"
			],
			[
				"nodeData",
				"nodeDataDict"
			],
			[
				"dep",
				"depth"
			],
			[
				"temp",
				"template"
			],
			[
				"templ",
				"templateDict"
			],
			[
				"Ut",
				"UtilsBase"
			],
			[
				"data",
				"dataList"
			],
			[
				"dataT",
				"dataType"
			],
			[
				"LTr",
				"LTreeNodeData"
			],
			[
				"datat",
				"dataTypeDict"
			],
			[
				"start",
				"startIndex"
			],
			[
				"child",
				"childLength"
			],
			[
				"childL",
				"childLength"
			],
			[
				"chi",
				"childList"
			],
			[
				"_GetItem",
				"_GetItemTemplate"
			],
			[
				"itemType",
				"itemTypeDict"
			],
			[
				"mas",
				"maskHeight"
			],
			[
				"ga",
				"gapVertical"
			],
			[
				"on",
				"onItemSelect"
			],
			[
				"size",
				"sizeDelta"
			],
			[
				"s",
				"selectKey"
			],
			[
				"nde",
				"nodeDataDict"
			],
			[
				"for",
				"forp\tfor k,v in pairs()"
			],
			[
				"ro",
				"rootNodeData"
			],
			[
				"GetNO",
				"_GetNodeX"
			],
			[
				"Comm",
				"CommonFileConfig"
			],
			[
				"ord",
				"orderList"
			],
			[
				"rando",
				"randomValue"
			],
			[
				"ran",
				"randomValue"
			],
			[
				"sele",
				"selectGo"
			],
			[
				"se",
				"selectIndex"
			],
			[
				"Eve",
				"EventLib"
			],
			[
				"eve",
				"eventName"
			]
		]
	},
	"buffers":
	[
		{
			"file": "LComponent/FSScrollPage.lua",
			"settings":
			{
				"buffer_size": 14712,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "--把滚动复用抽象成\n--维护一个有序列表，判断mask遮罩的前后下标是否一致，如果不一致则更新\nLBaseScroll = LBaseScroll or BaseClass()\n\nfunction LBaseScroll:__init(transform)\n    self.transform = transform\n    self.gameObject = transform.gameObject\n    self.orderDict = nil\n    self.eventNameList = nil\n    self:_InitScrollRect(transform)\n    self:_InitMask(transform:Find(LDefine.MASK_NAME))\n    self:_InitContent(self.maskTrans:Find(LDefine.CONTENT_NAME))\n    self:_InitTemplate()\n\n    self.ItemSelectEvent = EventLib.New()\nend\n\nfunction LBaseScroll:__release()\n    UtilsBase.ReleaseTable(self, \"eventNameList\")\nend\n\nfunction LBaseScroll:_InitScrollRect(transform)\n    local scrollRect = transform:GetComponent(ScrollRect)\n    self.scrollRect = scrollRect\n    scrollRect.onValueChanged:AddListener(function(value) self:_OnValueChanged(value) end)\n    if scrollRect.vertical then\n        self.scrollDirection = LDefine.Direction.vertical\n    else\n        self.scrollDirection = LDefine.Direction.horizontal\n    end\nend\n\nfunction LBaseScroll:_InitMask(transform)\n    local maskTrans = transform\n    self.maskTrans = maskTrans\n    local mask = maskTrans:GetComponent(Mask)\n    self.mask = mask\n    self.maskWidth = maskTrans.sizeDelta.x\n    self.maskHeight = maskTrans.sizeDelta.y\n    self.contentTrans = maskTrans:Find(LDefine.CONTENT_NAME)\nend\n\nfunction LBaseScroll:_InitContent(transform)\n    self.contentTrans = transform\n    self.contentGo = transform.gameObject\nend\n\nfunction LBaseScroll:_InitTemplate(transform)\n    local itemTrans = self.contentTrans:Find(LDefine.ITEM_NAME)\n    self.itemWidth = itemTrans.sizeDelta.x\n    self.itemHeight = itemTrans.sizeDelta.y\n    self.template = itemTrans.gameObject\n    self.template:SetActive(true)\n    self.template.transform.localScale = Vector3Zero\nend\n\n-- public function start\nfunction LBaseScroll:SetData()\n    pError(\"重写SetData方法\")\nend\n\nfunction LBaseScroll:AddItemEvent(eventName)\n    if self.eventNameList == nil then\n        self.eventNameList = {}\n    end\n    table.insert(self.eventNameList, eventName)\n    self[eventName] = EventLib.New()\nend\n\n-- public function end\nfunction LBaseScroll:_Update()\n    self.startIndex = self:_GetStartIndex()\n    self.endIndex = self:_GetEndIndex()\n    self:_PushUnUsedItem()\n    for index = self.startIndex, self.endIndex do\n        local item, getWay = self:_GetItem(index)\n        item:SetActive(true)\n        if getWay ~= LDefine.GetItemWay.exist then\n            item:SetData(self.dataList[index], self.commonData)\n            item:SetPosition(self:_GetPosition(index))\n            self.orderDict[index] = item\n        end\n    end\nend\n\nfunction LBaseScroll:_GetItem(index, orderIndex)\n    if self.orderDict and self.orderDict[index] then\n        local item = self.orderDict[index]\n        return item, LDefine.GetItemWay.exist\n    elseif self.itemPoolList and #self.itemPoolList > 0 then\n        local item = table.remove(self.itemPoolList)\n        item:InitFromCache(index) \n        return item, LDefine.GetItemWay.cache\n    end\n    local go = GameObject.Instantiate(self.template)\n    go.transform:SetParent(self.contentTrans, false)\n    local item = self.itemType.New(go)\n    item:SetIndex(index)\n    item.ItemSelectEvent:AddListener(function(index, item) self.ItemSelectEvent:Fire(index, item) end)\n    if self.eventNameList then\n        for i = 1, #self.eventNameList do\n            local eventName = self.eventNameList[i]\n            item[eventName]:AddListener(function(...) self[eventName]:Fire(...) end)\n        end\n    end\n    return item, LDefine.GetItemWay.new\nend\n\nfunction LBaseScroll:_OnValueChanged(value)\n    if self:_IsDataListEmpty() then\n        return\n    end\n    if self.startIndex ~= self:_GetStartIndex() or\n        self.endIndex ~= self:_GetEndIndex() then\n        self:_Update()\n    end\nend\n\nfunction LBaseScroll:_GetStartIndex()\n    pError(\"重写_GetStartIndex方法\")\nend\n\nfunction LBaseScroll:_GetEndIndex()\n    pError(\"重写_GetEndIndex方法\")\nend\n\nfunction LBaseScroll:_PushPool(item)\n    item:SetActive(false)\n    local orderIndex = self:_GetOrderIndex(item.index)\n    self.orderDict[orderIndex] = nil\n    if self.itemPoolList == nil then\n        self.itemPoolList = {}\n    end\n    table.insert(self.itemPoolList, item)\nend\n\nfunction LBaseScroll:_PushUnUsedItem()\n    if self.orderDict then\n        for index, item in pairs(self.orderDict) do\n            if index < self.startIndex or index > self.endIndex then\n                self:_PushPool(item)\n            end\n        end\n    end\nend\n\nfunction LBaseScroll:_IsDataListEmpty()\n    return self.dataList == nil or next(self.dataList) == nil\nend\n\nfunction LBaseScroll:_GetMaskLeft()\n    return -self.contentTrans.anchoredPosition.x\nend\n\nfunction LBaseScroll:_GetMaskRight()\n    return -self.contentTrans.anchoredPosition.x + self.maskWidth\nend\n\nfunction LBaseScroll:_GetMaskTop()\n    return -self.contentTrans.anchoredPosition.y\nend\n\nfunction LBaseScroll:_GetMaskBottom()\n    return -self.contentTrans.anchoredPosition.y - self.maskHeight \nend\n",
			"file": "LComponent/LBaseScroll.lua",
			"file_size": 5219,
			"file_write_time": 131967943304023903,
			"settings":
			{
				"buffer_size": 4964,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/D/code/unity/LUIDemo/Lua",
		"/D/code/unity/LUIDemo/Lua/Base",
		"/D/code/unity/LUIDemo/Lua/Config",
		"/D/code/unity/LUIDemo/Lua/ConfigHelper",
		"/D/code/unity/LUIDemo/Lua/LComponent",
		"/D/code/unity/LUIDemo/Lua/Manager",
		"/D/code/unity/LUIDemo/Lua/Test",
		"/D/code/unity/LUIDemo/Lua/Util"
	],
	"file_history":
	[
		"/D/code/unity/LUIDemo/Lua/LComponent/LScrollPage.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LSIScrollViewTest.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/FSScrollPage.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LScrollPageTest.lua",
		"/D/code/unity/LUIDemo/Lua/Main.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LTree.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LItem.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LDefine.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LRadarChart.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LPanel.lua",
		"/D/code/unity/LUIDemo/Lua/Config/PanelConfig.lua",
		"/D/code/unity/LUIDemo/Lua/Manager/PanelManager.lua",
		"/D/code/unity/LUIDemo/Lua/Asset/ModelLoader.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LUIModel.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LLayerTest.lua",
		"/D/code/unity/LUIDemo/Lua/Asset/AssetLoader.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LEmojiTextTest.lua",
		"/D/code/unity/LUIDemo/Lua/Base/BaseClass.lua",
		"/D/code/unity/LUIDemo/Lua/Base/EventLib.lua",
		"/D/code/unity/LUIDemo/Lua/Util/Tween.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LUIModel/LUIModelTest.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LEmojiTextItem.lua",
		"/D/code/unity/LUIDemo/Lua/Util/UtilsBase.lua",
		"/D/code/unity/LUIDemo/Lua/Asset/ModelLoaderData.lua",
		"/D/code/unity/LUIDemo/Lua/Asset/UIEffectLoader.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LUIModel/LUIModelTestItem.lua",
		"/D/code/unity/LUIDemo/Lua/Asset/AssetDefine.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LRTModel/LRTModelTest.lua",
		"/D/code/unity/LUIDemo/Unity/Assets/Plugins/Slua_Managed/LuaArray.cs",
		"/D/code/unity/LUIDemo/Lua/Util/UtilsTable.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LRTModel/LRTModelTestItem.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LRTModel.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LRenderTexture/LRenderTextureTestItem.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LRenderTexture/LRenderTextureTest.lua",
		"/D/code/unity/LUIDemo/Lua/ConfigHelper/ModelConfigHelper.lua",
		"/D/code/unity/LUIDemo/Lua/Config/ModelConfig.lua",
		"/D/code/unity/LUIDemo/Lua/Test/PreviewComposite.lua",
		"/d/Documents/WXWork/1688850709317594/Cache/File/2018-10/_hotswap.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LScrollPageDemo.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LScrollViewDemoItem1.lua",
		"/D/code/unity/LUIDemo/Lua/TestMain.lua",
		"/D/code/unity/LUIDemo/Lua/DemoMain.lua",
		"/D/code/unity/LUIDemo/Lua/CommonRequire.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LListDemo.lua",
		"/D/code/unity/LUIDemo/Lua/Test/TestDefine.lua",
		"/D/code/unity/LUIDemo/Lua/Main/DemoMain.lua",
		"/D/code/unity/LUIDemo/Lua/Main/TestMain.lua",
		"/D/code/unity/LUIDemo/Lua/Main/CommonRequire.lua",
		"/D/code/unity/LUIDemo/Lua/Util/UtilsUI.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LRenderTexture.lua",
		"/D/code/unity/LUIDemo/Lua/Config.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LRenderTextureTest.lua",
		"/D/code/unity/LUIDemo/Lua/Test/PreviewmodelComposite.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LListTest.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LScrollView.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LSIScrollViewDemo.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/DemoManager.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LDemoItem.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LSIScrollView.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LRadarChartDemo.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LTestItem.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LScrollViewDemo.lua",
		"/D/code/unity/LUIDemo/Lua/Test/MeshTest.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LMIScrollView.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LMIScrollView/LMIScrollViewDemo.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LList.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LMIScrollView/LMIScrollViewTest.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LScrollViewTest.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LMIScrollView/LMIScrollViewTestItem.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/BaseDemo.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LMIScrollView/LMIScrollViewDemoItem1.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LMIScrollView/LMIScrollViewDemoItem.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LMIScrollView/LMIScrollViewDemoItem2.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeDemo.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LTreeNodeData.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LMIScrollView/LMIScrollViewTestItem2.lua",
		"/D/code/unity/LUIDemo/Lua/Test/BaseTest.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LMIScrollView/LMIScrollViewTestItem1.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LMultiVerticalScrollView.lua",
		"/D/code/unity/LUIDemo/Lua/Test/ImageMeshTest.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeDemo1.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LTreeTestItem.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LTreeTestItem1.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LScrollViewDemo1.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeNodeDataDemo2_2.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeNodeDemo.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeNodeDemo_1.lua",
		"/D/code/unity/LUIDemo/Lua/LComponent/LTreeNode.lua",
		"/D/code/unity/LUIDemo/Lua/Lua.sublime-project",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeNodeDemo1.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeDemo2.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeNodeDemo2_2.lua",
		"/D/code/unity/LUIDemo/Lua/Test/LTreeTest.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeNodeDemo2_1.lua",
		"/D/code/unity/LUIDemo/Lua/Demo/LTree/LTreeNodeDataDemo1.lua",
		"/D/code/unity/LUIDemo/Lua/BaseRequire.lua",
		"/D/code/unity/LUIDemo/Lua/test.lua",
		"/D/code/unity/LUIDemo/Lua/Util/EventMgr.lua",
		"/D/code/unity/LUIDemo/Lua/UIComponent/ListView.lua",
		"/D/code/unity/Lua/LComponent/LScrollPage.lua",
		"/D/code/unity/Lua/Util/EventMgr.lua",
		"/D/code/unity/Lua/LComponent/LScrollView.lua",
		"/D/code/unity/Lua/Test/LScrollPageTest.lua",
		"/D/code/unity/Lua/test.lua",
		"/D/code/unity/Lua/LComponent/LTreeNode.lua",
		"/D/code/unity/lua/LComponent/LTreeNode.lua",
		"/D/code/unity/Lua/LComponent/LTree.lua"
	],
	"find":
	{
		"height": 36.0
	},
	"find_in_files":
	{
		"height": 104.0,
		"where_history":
		[
			"D:\\code\\unity\\LUIDemo\\Lua",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"pageIndex",
			"index",
			"_GetItem",
			"_GetStartIndex",
			"_PushUnUsedItem",
			"column",
			"pageIndex",
			"page",
			"perPageCount",
			"page",
			"_PushPool",
			"itemDict",
			"_OnValueChanged",
			"FSScrollPage",
			"_OnValueChanged",
			"ReachBottomEvent",
			"_InitTemplate",
			"maskTrans",
			"_InitMask",
			"maskTrans",
			"_OnValueChanged",
			"_GetStartIndex",
			"itemPoolList",
			"itemDict",
			"orderList",
			"orderDict",
			"orderList",
			"_Update",
			"_GetStartIndex",
			"orderList",
			"_PushUnUsedItem",
			"_InitComponent",
			"itemDict",
			"ItemSelectEvent",
			"LBaseScroll",
			"_CalcSizeDelta",
			"itemDict",
			"_PushUnUsedItem",
			"orderList",
			"_GetItem",
			"_GetContentMinX",
			"_CalcSizeDelta",
			"elf.orderList",
			"_TreeToList",
			"orderList",
			"_UpdateTree",
			"Update",
			"_Update",
			"Update",
			"_PushUnUsedItem",
			"_GetRowIndex",
			"_GetStartRowIndex",
			"_GetStartIndex",
			"scrollDirection",
			"_IsVerticalScroll",
			"_PageHorizontalLayout",
			"pageLayoutDirection",
			"vertical",
			"scrollDirection",
			"return",
			"_IsVerticalScroll",
			"IsVerticalScroll",
			"_IsVerticalScroll",
			"contentTrans",
			"tweenId",
			"_TweenMove",
			"_EmptyCacheItemList",
			"_PushPool",
			"_GetRowIndex",
			"_GetStartRowIndex",
			"_IsVerticalScroll",
			"_GetEndIndex",
			"_GetEndRowIndex",
			"_GetRowIndex",
			"_GetEndRowIndex",
			"_Update",
			"_InitTemplateItem",
			"startIndex",
			"_GetDataLength",
			"LSIScrollView",
			"_GetMaskLeft",
			"_GetStartColumnIndex",
			"_GetMaskLeft",
			"_CalcMaskSize",
			"maskTrans",
			"SetData",
			"_CalculateSize",
			"_Update",
			"_PageHorizontalLayout",
			"_HideOutRangeList",
			"startIndex",
			"_GetIndexRange",
			"_Update",
			"OnValue",
			"_IsDataListEmpty",
			"LSIScrollView",
			"_IsDataListEmpty",
			"scrollDirection",
			"_IsVerticalScroll",
			"_GetStartIndex",
			"currentPage",
			"initPage",
			"_HideOutRangeList",
			"LSIScrollView",
			"_HideOutRangeList",
			"_Update",
			"_InitComponent",
			"currentPage",
			"currentPageDynamic",
			"_InitMask",
			"contentTrans",
			"transform",
			"_InitDragEvent",
			"_CalcMaskSize",
			"maskImage",
			"_Layout",
			"_ItemHorizontalLayout",
			"maskHeight",
			"page",
			"_PageHorizontalLayout",
			"_GetPosition",
			"GetPosition",
			"offset",
			"_IsVerticalScroll",
			"_GetPosition",
			"_Layout",
			"SetData",
			"_GetPosition"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"AssetDefine.VEHICLE_ANIMATION_PATH",
			"AssetDefine.VEHICLE_SKIN_PATH",
			"AssetDefine.VEHICLE_PREFAB_PATH",
			"    "
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "LComponent/FSScrollPage.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14712,
						"regions":
						{
						},
						"selection":
						[
							[
								12724,
								12734
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 7367.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		},
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 1,
					"file": "LComponent/LBaseScroll.lua",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4964,
						"regions":
						{
						},
						"selection":
						[
							[
								2548,
								2553
							]
						],
						"settings":
						{
							"syntax": "Packages/Lua/Lua.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1245.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 28.0
	},
	"input":
	{
		"height": 40.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.539810700714,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "Lua.sublime-project",
	"replace":
	{
		"height": 52.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"lbas",
				"LComponent\\LBaseScroll.lua"
			],
			[
				"scrollpa",
				"LComponent\\LScrollPage.lua"
			],
			[
				"fssc",
				"LComponent\\FSScrollPage.lua"
			],
			[
				"main",
				"Main.lua"
			],
			[
				"twee",
				"Util\\Tween.lua"
			],
			[
				"LEmojiTextItem",
				"Test\\LEmojiTextItem.lua"
			],
			[
				"LE",
				"Test\\LEmojiTextItem.lua"
			],
			[
				"asset",
				"Asset\\AssetLoader.lua"
			],
			[
				"utls",
				"Util\\UtilsBase.lua"
			],
			[
				"LUIMo",
				"LComponent\\LUIModel.lua"
			],
			[
				"luimo",
				"LComponent\\LUIModel.lua"
			],
			[
				"bas",
				"Base\\BaseClass.lua"
			],
			[
				"utilsb",
				"Util\\UtilsBase.lua"
			],
			[
				"previ",
				"Test\\PreviewComposite.lua"
			],
			[
				"Lui",
				"LComponent\\LUIModel.lua"
			],
			[
				"modelload",
				"Asset\\ModelLoader.lua"
			],
			[
				"Lscro",
				"LComponent\\LScrollPage.lua"
			],
			[
				"LScrollpage",
				"Demo\\LScrollPageDemo.lua"
			],
			[
				"LScrollviewde",
				"Demo\\LScrollViewDemoItem1.lua"
			],
			[
				"LlIstde",
				"Demo\\LListDemo.lua"
			],
			[
				"testde",
				"Test\\TestDefine.lua"
			],
			[
				"utilsui",
				"Util\\UtilsUI.lua"
			],
			[
				"uu",
				"Util\\UtilsUI.lua"
			],
			[
				"util",
				"Util\\UtilsBase.lua"
			],
			[
				"prev",
				"Test\\PreviewComposite.lua"
			],
			[
				"modello",
				"Asset\\ModelLoader.lua"
			],
			[
				"LSISc",
				"Demo\\LSIScrollViewDemo.lua"
			],
			[
				"Ltest",
				"Test\\LTestItem.lua"
			],
			[
				"scrollview",
				"LComponent\\LScrollView.lua"
			],
			[
				"LDemoItem",
				"Demo\\LDemoItem.lua"
			],
			[
				"LItem",
				"LComponent\\LItem.lua"
			],
			[
				"basec",
				"Base\\BaseClass.lua"
			],
			[
				"Lscrollvi",
				"LComponent\\LScrollView.lua"
			],
			[
				"LLi",
				"LComponent\\LList.lua"
			],
			[
				"lsc",
				"LComponent\\LScrollView.lua"
			],
			[
				"scrollpage",
				"LComponent\\LScrollPage.lua"
			],
			[
				"LScro",
				"LComponent\\LScrollView.lua"
			],
			[
				"LTestItem",
				"Test\\LTestItem.lua"
			],
			[
				"lmi",
				"LComponent\\LMIScrollView.lua"
			],
			[
				"scrollvi",
				"LComponent\\LScrollView.lua"
			],
			[
				"NS",
				"LComponent\\NScrollView.lua"
			],
			[
				"LMIScrollViewDemoItem1",
				"Demo\\LMIScrollView\\LMIScrollViewDemoItem1.lua"
			],
			[
				"basede",
				"Demo\\BaseDemo.lua"
			],
			[
				"u",
				"Util\\UtilsBase.lua"
			],
			[
				"base",
				"Base\\BaseClass.lua"
			],
			[
				"Litem",
				"LComponent\\LItem.lua"
			],
			[
				"Lite",
				"LComponent\\LItem.lua"
			],
			[
				"Lis",
				"LComponent\\LList.lua"
			],
			[
				"LTr",
				"LComponent\\LTree.lua"
			],
			[
				"LMu",
				"LComponent\\LMultiVerticalScrollView.lua"
			],
			[
				"LScroo",
				"Demo\\LScrollPageDemo.lua"
			],
			[
				"scrollv",
				"LComponent\\LScrollView.lua"
			],
			[
				"ltreedemo",
				"Demo\\LTree\\LTreeDemo1.lua"
			],
			[
				"ltree",
				"LComponent\\LTree.lua"
			],
			[
				"ut",
				"Util\\UtilsUI.lua"
			],
			[
				"notdeda",
				"LComponent\\LTreeNodeData.lua"
			],
			[
				"lnode",
				"LComponent\\LTreeNodeData.lua"
			],
			[
				"ltreeno",
				"LComponent\\LTreeNodeData.lua"
			],
			[
				"ltreenodemo",
				"Demo\\LTree\\LTreeNodeDemo2_2.lua"
			],
			[
				"nodedata",
				"LComponent\\LTreeNodeData.lua"
			],
			[
				"ltre",
				"LComponent\\LTreeNodeData.lua"
			],
			[
				"ltreenode",
				"LComponent\\LTreeNodeData.lua"
			],
			[
				"lscroll",
				"LComponent\\LScrollView.lua"
			],
			[
				"lscro",
				"LComponent\\LScrollView.lua"
			],
			[
				"lscrollvi",
				"LComponent\\LScrollView.lua"
			],
			[
				"utilsba",
				"Util\\UtilsBase.lua"
			],
			[
				"litem",
				"LComponent\\LItem.lua"
			],
			[
				"demomain",
				"DemoMain.lua"
			],
			[
				"litm",
				"LComponent\\LItem.lua"
			],
			[
				"lscrollview",
				"LComponent\\LScrollView.lua"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 236.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
